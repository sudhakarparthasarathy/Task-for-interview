AWSTemplateFormatVersion: '2010-09-09'
Description: 'Scalable and Secure Web Application Infrastructure on AWS using CloudFormation'

Parameters:
  EnvironmentName:
    Description: 'Environment name prefix for resources'
    Type: String
    Default: 'WebApp'
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9-]*$'
    ConstraintDescription: 'Must start with a letter and contain only alphanumeric characters and hyphens'
  VpcCIDR:
    Description: 'VPC CIDR block'
    Type: String
    Default: '10.0.0.0/16'
  PublicSubnet1CIDR:
    Description: 'Public Subnet 1 CIDR'
    Type: String
    Default: '10.0.1.0/24'
  PublicSubnet2CIDR:
    Description: 'Public Subnet 2 CIDR'
    Type: String
    Default: '10.0.2.0/24'
  PrivateSubnet1CIDR:
    Description: 'Private Subnet 1 CIDR for Web Servers'
    Type: String
    Default: '10.0.3.0/24'
  PrivateSubnet2CIDR:
    Description: 'Private Subnet 2 CIDR for Web Servers'
    Type: String
    Default: '10.0.4.0/24'
  DatabaseSubnet1CIDR:
    Description: 'Database Subnet 1 CIDR'
    Type: String
    Default: '10.0.5.0/24'
  DatabaseSubnet2CIDR:
    Description: 'Database Subnet 2 CIDR'
    Type: String
    Default: '10.0.6.0/24'
  InstanceType:
    Description: 'EC2 instance type for web servers'
    Type: String
    Default: 't3.micro'
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
  DBInstanceClass:
    Description: 'RDS instance class'
    Type: String
    Default: 'db.t3.micro'
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
  DBName:
    Description: 'Database name'
    Type: String
    Default: 'webappdb'
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
    MinLength: 3
    MaxLength: 63
  DBUsername:
    Description: 'Database master username (DO NOT hardcode sensitive info directly in template)'
    Type: String
    NoEcho: true # Hides the value in CloudFormation console
    MinLength: 3
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
  DBPassword:
    Description: 'Database master password (DO NOT hardcode sensitive info directly in template)'
    Type: String
    NoEcho: true # Hides the value in CloudFormation console
    MinLength: 8
    MaxLength: 128
    AllowedPattern: '(?=^.{8,}$)(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9]).*$'
    ConstraintDescription: 'Must be at least 8 characters and include uppercase, lowercase, number, and special character'
  WebServerCapacity:
    Description: 'Desired number of web servers in the Auto Scaling Group'
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 4

Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMI: 'ami-0c55b159cbfafe1f0' # Amazon Linux 2023
    us-west-2:
      AMI: 'ami-03f65b8614a860c29' # Amazon Linux 2023
    ap-south-1:
      [cite_start]AMI: 'ami-0f5ee92e2d63afc18' # Amazon Linux 2023 
    eu-west-1:
      AMI: 'ami-09020d21650b29864' # Amazon Linux 2023
    sa-east-1:
      AMI: 'ami-0b1a0300d89240366' # Amazon Linux 2023

Resources:
  # 2. Networking (VPC) [cite: 16]
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      [cite_start]CidrBlock: !Ref VpcCIDR [cite: 68]
      [cite_start]EnableDnsSupport: true [cite: 69]
      [cite_start]EnableDnsHostnames: true [cite: 69]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-VPC'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-IGW'

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      [cite_start]VpcId: !Ref VPC [cite: 70]
      [cite_start]InternetGatewayId: !Ref InternetGateway [cite: 70]

  # Public Subnets (across at least two AZs) [cite: 17, 19]
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      [cite_start]VpcId: !Ref VPC [cite: 70]
      [cite_start]CidrBlock: !Ref PublicSubnet1CIDR [cite: 70]
      [cite_start]AvailabilityZone: !Select [0, !GetAZs ''] [cite: 70]
      [cite_start]MapPublicIpOnLaunch: true # For NAT Gateway EIPs and ALB [cite: 70]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PublicSubnet1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      [cite_start]VpcId: !Ref VPC [cite: 71]
      [cite_start]CidrBlock: !Ref PublicSubnet2CIDR [cite: 71]
      [cite_start]AvailabilityZone: !Select [1, !GetAZs ''] [cite: 71]
      [cite_start]MapPublicIpOnLaunch: true [cite: 71]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PublicSubnet2'

  # Route Table for Public Subnets (Route to IGW) [cite: 20, 21]
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PublicRT'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment # Ensure IGW is attached before creating route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Private Subnets for Web Tier (across at least two AZs) [cite: 17, 19]
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      [cite_start]VpcId: !Ref VPC [cite: 71]
      [cite_start]CidrBlock: !Ref PrivateSubnet1CIDR [cite: 71]
      [cite_start]AvailabilityZone: !Select [0, !GetAZs ''] [cite: 71]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PrivateSubnet1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      [cite_start]VpcId: !Ref VPC [cite: 72]
      [cite_start]CidrBlock: !Ref PrivateSubnet2CIDR [cite: 72]
      [cite_start]AvailabilityZone: !Select [1, !GetAZs ''] [cite: 72]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PrivateSubnet2'

  # Private Subnets for DB Tier (across at least two AZs) [cite: 17, 19]
  DatabaseSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      [cite_start]VpcId: !Ref VPC [cite: 72]
      [cite_start]CidrBlock: !Ref DatabaseSubnet1CIDR [cite: 73]
      [cite_start]AvailabilityZone: !Select [0, !GetAZs ''] [cite: 73]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-DatabaseSubnet1'

  DatabaseSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      [cite_start]VpcId: !Ref VPC [cite: 73]
      [cite_start]CidrBlock: !Ref DatabaseSubnet2CIDR [cite: 73]
      [cite_start]AvailabilityZone: !Select [1, !GetAZs ''] [cite: 73]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-DatabaseSubnet2'

  [cite_start]DatabaseSubnetGroup: # Used by RDS to deploy across specified subnets [cite: 74]
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'Subnet group for RDS instances'
      SubnetIds:
        - [cite_start]!Ref DatabaseSubnet1 [cite: 74]
        - [cite_start]!Ref DatabaseSubnet2 [cite: 74]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-DBSubnetGroup'

  # NAT Gateways (one per public subnet for high availability) [cite: 22, 23]
  NATGateway1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-NATGateway1-EIP'

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1 # NAT Gateway in Public Subnet 1
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-NATGateway1'

  NATGateway2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-NATGateway2-EIP'

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2 # NAT Gateway in Public Subnet 2
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-NATGateway2'

  # Route Tables for Private Subnets (Route to NAT Gateways) [cite: 22]
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PrivateRT1'

  PrivateRoute1ToNAT:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1 # Route to NAT Gateway 1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  DatabaseSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DatabaseSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-PrivateRT2'

  PrivateRoute2ToNAT:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2 # Route to NAT Gateway 2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  DatabaseSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref DatabaseSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # 5. Security Groups [cite: 45]
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      [cite_start]GroupDescription: 'Security Group for the Application Load Balancer' [cite: 75]
      [cite_start]VpcId: !Ref VPC [cite: 75]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          [cite_start]CidrIp: 0.0.0.0/0 # Allow HTTP from anywhere [cite: 47, 48, 75]
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          [cite_start]CidrIp: 0.0.0.0/0 # Allow HTTPS from anywhere (good practice) [cite: 75, 76]
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          [cite_start]CidrIp: !Ref VpcCIDR # Allow outbound to web servers in VPC [cite: 76]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-ALB-SG'

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      [cite_start]GroupDescription: 'Security Group for Web Tier EC2 instances' [cite: 77]
      [cite_start]VpcId: !Ref VPC [cite: 77]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          [cite_start]SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId # Allow HTTP only from ALB [cite: 49, 77]
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          [cite_start]CidrIp: 0.0.0.0/0 # Allow outbound for OS patching, updates, etc. [cite: 49, 78]
        - IpProtocol: tcp
          FromPort: 5432 # PostgreSQL port
          ToPort: 5432
          [cite_start]SourceSecurityGroupId: !GetAtt DatabaseSecurityGroup.GroupId # Allow outbound to DB SG (or specific DB CIDR) [cite: 49]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-Web-SG'

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      [cite_start]GroupDescription: 'Security Group for RDS Database instance' [cite: 79]
      [cite_start]VpcId: !Ref VPC [cite: 79]
      SecurityGroupIngress:
        - IpProtocol: tcp
          [cite_start]FromPort: 5432 # PostgreSQL default port [cite: 50]
          ToPort: 5432
          [cite_start]SourceSecurityGroupId: !GetAtt WebServerSecurityGroup.GroupId # Allow inbound only from Web SG [cite: 50, 79]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-DB-SG'

  # 5. IAM Role for EC2 
  WebServerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        [cite_start]Version: '2012-10-17' [cite: 83]
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - [cite_start]'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore' # Enables Systems Manager [cite: 53, 54]
        - [cite_start]'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy' # For CloudWatch Agent (good practice) [cite: 83]
      [cite_start]Path: / [cite: 83]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-WebServer-Role'

  WebServerInstanceProfile: # Used to attach IAM Role to EC2 instances
    Type: AWS::IAM::InstanceProfile
    Properties:
      [cite_start]Path: / [cite: 84]
      Roles:
        - [cite_start]!Ref WebServerRole [cite: 84]

  # 3. Compute (Web Tier) [cite: 24] - Launch Template for ASG
  WebServerLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub '${EnvironmentName}-LaunchTemplate'
      LaunchTemplateData:
        ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMI]
        [cite_start]InstanceType: !Ref InstanceType [cite: 66]
        SecurityGroupIds:
          - !GetAtt WebServerSecurityGroup.GroupId # Attach Web Server SG
        IamInstanceProfile:
          [cite_start]Arn: !GetAtt WebServerInstanceProfile.Arn # Attach IAM Role [cite: 56, 57]
        UserData:
          Fn::Base64: !Sub | # User Data to install Nginx and create Hello World page [cite: 31, 32, 85]
            #!/bin/bash
            yum update -y
            yum install -y nginx amazon-linux-extras
            amazon-linux-extras install -y nginx1.12 # Ensure nginx is installed for Amazon Linux

            # Configure nginx for health checks and simple index page
            cat > /etc/nginx/conf.d/webapp.conf << 'EOF'
            server {
                listen 80;
                location /health {
                    access_log off;
                    return 200 'OK';
                    add_header Content-Type text/plain;
                }
                location / {
                    root /usr/share/nginx/html;
                    index index.html;
                }
            }
            EOF

            # Create simple index page [cite: 88]
            echo "<html><body><h1>Hello World from $(hostname -f)</h1></body></html>" > /usr/share/nginx/html/index.html

            # Set correct permissions
            [cite_start]chown -R nginx:nginx /usr/share/nginx/html [cite: 89]
            [cite_start]chmod -R 755 /usr/share/nginx/html [cite: 89]

            # Validate Nginx configuration
            [cite_start]nginx -t [cite: 89]

            # Start Nginx service and enable it to start on boot
            systemctl enable nginx
            systemctl start nginx

            # Install and configure CloudWatch Agent (optional, but good for monitoring)
            # You would typically pull agent config from SSM Parameter Store
            # /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:AmazonCloudWatch-linux -s
            # systemctl enable amazon-cloudwatch-agent
            # systemctl start amazon-cloudwatch-agent
            
            # Simple health check to verify UserData execution [cite: 90]
            curl -sI http://localhost/health && echo "Nginx health check OK" || echo "Nginx health check FAILED"

  # 3. Compute (Web Tier) - Auto Scaling Group [cite: 25]
  WebServerAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      [cite_start]AutoScalingGroupName: !Sub '${EnvironmentName}-ASG' [cite: 91]
      LaunchTemplate:
        [cite_start]LaunchTemplateId: !Ref WebServerLaunchTemplate [cite: 91]
        [cite_start]Version: !GetAtt WebServerLaunchTemplate.LatestVersionNumber [cite: 91]
      [cite_start]MinSize: '1' [cite: 91]
      [cite_start]MaxSize: '4' [cite: 91]
      [cite_start]DesiredCapacity: !Ref WebServerCapacity [cite: 28, 92]
      VPCZoneIdentifier:
        - [cite_start]!Ref PrivateSubnet1 # Launch instances in private subnets [cite: 26, 92]
        - [cite_start]!Ref PrivateSubnet2 [cite: 92]
      TargetGroupARNs:
        - [cite_start]!Ref WebServerTargetGroup # Register instances with ALB Target Group [cite: 36, 92]
      [cite_start]HealthCheckType: ELB # Use ELB health checks for ASG [cite: 92]
      [cite_start]HealthCheckGracePeriod: 300 # Give instances time to warm up [cite: 92]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-WebServer'
          [cite_start]PropagateAtLaunch: true [cite: 92]
      [cite_start]Cooldown: 300 [cite: 92]
      [cite_start]TerminationPolicies: [Default] # Default termination policy [cite: 93]

  # 3. Compute (Web Tier) - ASG Scaling Policies [cite: 29]
  # Scale Out Policy
  CPUUtilizationScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1 # Add 1 instance
      Cooldown: 300 # 5 minutes cooldown
      MetricAggregationType: Average
      PolicyType: TargetTrackingScaling # Target tracking for simplicity
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGTargetTrackingCPUUtilization
        TargetValue: 70.0 # Maintain average CPU at 70%

  # Scale In Policy
  CPUUtilizationScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref WebServerAutoScalingGroup
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1 # Remove 1 instance
      Cooldown: 300 # 5 minutes cooldown
      MetricAggregationType: Average
      PolicyType: TargetTrackingScaling # Target tracking for simplicity
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGTargetTrackingCPUUtilization
        TargetValue: 30.0 # Maintain average CPU at 30%

  # 3. Compute (Web Tier) - Application Load Balancer [cite: 33]
  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      [cite_start]Name: !Sub '${EnvironmentName}-ALB' [cite: 80]
      [cite_start]Scheme: internet-facing # Publicly accessible [cite: 34, 80]
      Subnets:
        - [cite_start]!Ref PublicSubnet1 # Deploy nodes in public subnets [cite: 34, 80]
        - [cite_start]!Ref PublicSubnet2 [cite: 80]
      SecurityGroups:
        - [cite_start]!Ref ALBSecurityGroup # Attach ALB Security Group [cite: 80]
      [cite_start]Type: application [cite: 80]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-ALB'

  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      [cite_start]Name: !Sub '${EnvironmentName}-TG' [cite: 81]
      [cite_start]Port: 80 [cite: 81]
      [cite_start]Protocol: HTTP [cite: 81]
      [cite_start]VpcId: !Ref VPC [cite: 81]
      [cite_start]HealthCheckPath: /health # Health check path [cite: 37, 81]
      [cite_start]HealthCheckIntervalSeconds: 30 [cite: 81]
      [cite_start]HealthCheckTimeoutSeconds: 5 [cite: 81]
      [cite_start]HealthyThresholdCount: 2 [cite: 81]
      [cite_start]UnhealthyThresholdCount: 2 [cite: 81]
      [cite_start]TargetType: instance [cite: 81]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-TG'

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          [cite_start]TargetGroupArn: !Ref WebServerTargetGroup [cite: 35, 82]
      [cite_start]LoadBalancerArn: !Ref WebAppLoadBalancer [cite: 82]
      [cite_start]Port: 80 [cite: 82]
      [cite_start]Protocol: HTTP [cite: 82]

  # 4. Database (DB Tier) [cite: 38]
  WebAppDB:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot # Changed from Retain to Snapshot for safety during deletion
    UpdateReplacePolicy: Snapshot # Changed from Retain to Snapshot for safety
    Properties:
      [cite_start]DBInstanceIdentifier: !Sub '${EnvironmentName}-DB' [cite: 93]
      [cite_start]AllocatedStorage: '20' [cite: 93]
      [cite_start]DBInstanceClass: !Ref DBInstanceClass [cite: 93]
      [cite_start]Engine: postgres # Or mysql, as per your choice [cite: 40, 93]
      [cite_start]EngineVersion: '16.6' # Or appropriate version for MySQL [cite: 93]
      [cite_start]MasterUsername: !Ref DBUsername [cite: 58, 93]
      [cite_start]MasterUserPassword: !Ref DBPassword [cite: 58, 93]
      [cite_start]DBName: !Ref DBName [cite: 93]
      [cite_start]DBSubnetGroupName: !Ref DatabaseSubnetGroup [cite: 41, 94]
      VPCSecurityGroups:
        - [cite_start]!GetAtt DatabaseSecurityGroup.GroupId [cite: 94]
      [cite_start]MultiAZ: true # Enable Multi-AZ for high availability [cite: 42, 94]
      [cite_start]PubliclyAccessible: false # Database is not publicly accessible [cite: 43, 94]
      [cite_start]StorageType: gp3 [cite: 94]
      [cite_start]BackupRetentionPeriod: 7 [cite: 94]
      [cite_start]StorageEncrypted: true [cite: 94]
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName}-DB'

Outputs:
  WebAppURL:
    Description: 'The URL of the web application'
    [cite_start]Value: !Sub 'http://${WebAppLoadBalancer.DNSName}' [cite: 95]
  DatabaseEndpoint:
    Description: 'The endpoint address of the RDS database'
    [cite_start]Value: !GetAtt WebAppDB.Endpoint.Address [cite: 95]
  WebServerAutoScalingGroupName:
    Description: 'The name of the Auto Scaling Group for web servers'
    [cite_start]Value: !Ref WebServerAutoScalingGroup [cite: 95]
  VPCId:
    Description: 'The ID of the created VPC'
    Value: !Ref VPC
  PublicSubnet1Id:
    Description: 'The ID of Public Subnet 1'
    Value: !Ref PublicSubnet1
  PrivateSubnet1Id:
    Description: 'The ID of Private Subnet 1'
    Value: !Ref PrivateSubnet1
